== オブジェクト指向言語Onion

Onionはオブジェクト指向言語です．Onionのソースコードは，コンパイラによって，
JavaVMのクラスファイルに変換されます．インストール方法は，このディレクトリに
ある，Install.txtを参照してください．

* ツールの使い方

  * onionc
  
    使い方：

      onionc [オプション] ソースファイル ...
   
    使用可能なオプション：
    
      -classpath <classpath> ソースファイルのコンパイル時のクラスパスを設定します．
      -encoding <encoding> ソースファイルのエンコーディングを指定します．
      -d <output directory> コンパイル結果の出力ディレクトリを指定します．
      -maxErrorReports <error count> 意味解析時に報告するエラーの最大数を指定します．

    ソースファイルをコンパイルして，-dで指定された出力ディレクトリをルートとして，
    ソースファイルのモジュール名に対応したディレクトリにクラスファイルを生成します．
    -dを指定しなかった場合，カレントディレクトリがルートになります．
    モジュール名に対応したディレクトリとは，モジュール名の'.'をプラットフォーム依存の
    パス名に置き換えたディレクトリのことです．モジュール名を指定しなかった場合，
    出力ディレクトリのルートディレクトリに出力されます．

    例えば，モジュール名がorg.onion_langのソースをコンパイルした場合，

      LinuなどのUnix系OS: org/onion_lang
      Windows: org\onion_lang

    にクラスファイルが生成されます．
    
  * onion
    
    使い方：
    
      onion [オプション] ソースファイル [コマンドライン引数]
      
    使用可能なオプション：
    
      -classpath <classpath> ソースファイルのコンパイル時及び実行時のクラスパスを設定します．
      -encoding <encoding> ソースファイルのエンコーディングを指定します．
      -maxErrorReports <error count> 意味解析時に報告するエラーの最大数を指定します．
    
    ソースファイルをコンパイルして，実行します．実行が開始されるエントリポイントは，
    明示的に定義したクラスがあり、かつそのクラスにmainメソッドが定義されている場合は，
    その中で一番上のクラスのmainメソッドになります．明示的に定義したクラスにmain
    メソッドが無い場合は，トップレベルの最初の文がエントリポイントになります．
    
    
* 現状の制限事項など

  * abstractメソッドを実装しているかや，finalなメソッドをオーバーライド
	  していないかなど，まだちゃんとチェックしていないことがあり，コンパイルできても
	  実行時にVMのベリファイアにはじかれるコードを生成する可能性があります．
	
  * 処理系の品質は、まだあまり高くありません。コードの書き方によっては，突然例外を
    吐いてプログラムが終了することもあります．exampleディレクトリに入っている
    ソースコードはコンパイル可能なことが確認できているので，試しにコンパイルして
    みてください．
		
  * まだ，部分的にしかサポートされていない機能があります．
    例えば，try-catch文のfinallyはサポートされていません．他にも，
    synchronized文，++,--,+=,-=,*=,/=演算子，グローバル変数及び
    フィールドの初期化子などはまだサポートされていません．

* この製品／商品には，Apache Software Foundation (http://www.apache.org/)に
  おいて開発されたソフトウェアが含まれます．
